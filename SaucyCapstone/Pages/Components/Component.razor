@page "/"
@inject IJSRuntime _js
@using SaucyCapstone.Static

<div class="card-body">
    <RadzenScheduler Data="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text" id="calendar" AppointmentRender="@OnAppointmentRender" style="height: 731px;">
        <RadzenWeekView StartTime="TimeSpan.FromHours(5)" EndTime="TimeSpan.FromHours(19)" />
    </RadzenScheduler>
</div>
<div class="card-footer d-print-none">
    <div class="d-grid col-6 mx-auto">
        <button class="btn btn-lg btn-primary" type="button" @onclick="Print">Print Schedule</button>
    </div>
</div>

@code {
    [Parameter]
    public int studentId { get; set; }

    [Parameter]
    public string studentName { get; set; }

    [Parameter]
    public string studentFirstName { get; set; }

    [Parameter]
    public string studentLastName { get; set; }

    //protected override async void OnInitialized()
    //{

    //}

    protected override void OnAfterRender(bool firstRender)
    {
        var targetUrl = "js/calendar.js";
        _js.InvokeVoidAsync("loadJs", targetUrl);
        _js.InvokeVoidAsync("setTitle", studentFirstName + " " + studentLastName);
    }

    async Task Print()
    {
        await _js.InvokeVoidAsync("reloadCss", true);
        await _js.InvokeVoidAsync("saveAsPdf", studentName);
        await _js.InvokeVoidAsync("reloadCss");
    }

    [Inject]
    public ApplicationDbContext? _db { get; set; }

    class DataItem
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
        public string DayOfWeek { get; set; }
    }

    List<DataItem> data = new List<DataItem>();

    protected async override Task OnParametersSetAsync()
    {
        var sessions = await _db?.Sessions.Where(e => e.Enrollments.Where(x => x.StudentId == studentId).Any())
                .Select(e => new DataItem
                    {
                        Text = e.Course.Subject.SubjectName + " " + e.Course.CourseLevel.ToString() + ": " + e.StartTime.ToShortTimeString() + " - " + e.EndTime.ToShortTimeString(),
                        Start = e.StartTime,
                        End = e.EndTime,
                        DayOfWeek = e.DayofWeek
                    })
                .ToListAsync();
        foreach (var session in sessions)
        {
            var startOfWeek = DateTime.Now.StartOfWeek();
            var updatedSessionStart = startOfWeek
                .AddDays(DayofWeekNumber(session.DayOfWeek))
                .AddHours(session.Start.Hour)
                .AddMinutes(session.Start.Minute);
            session.Start = updatedSessionStart;
            var updatedSessionEnd = startOfWeek
                .AddDays(DayofWeekNumber(session.DayOfWeek))
                .AddHours(session.End.Hour)
                .AddMinutes(session.End.Minute);
            session.End = updatedSessionEnd;
        }

        data = sessions;
    }

    private double DayofWeekNumber(string day)
    {
        return day switch
        {
            "Sunday" => 0d,
            "Monday" => 1d,
            "Tuesday" => 2d,
            "Wednesday" => 3d,
            "Thursday" => 4d,
            "Friday" => 5d,
            "Saturday" => 6d,
            _ => throw new NotImplementedException(),
        };
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<DataItem> args)
    {
        var text = args.Data.Text;
        if (text.Contains("English"))
        {
            //Teal
            args.Attributes["style"] = "background: #008080";
        }
        else if (text.Contains("IT"))
        {
            //SteelBlue
            args.Attributes["style"] = "background: #4682B4";
        }
        else if (text.Contains("Public"))
        {
            //DarkTurquoise
            args.Attributes["style"] = "background: #00CED1";
        }
    }
}
